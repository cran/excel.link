% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/0COMError.R, R/0classes.R, R/0com.R, R/0zzzCOMLists.R, R/0zzzrunTime.R, R/RDCOMClient.R
\docType{class}
\name{COMStop}
\alias{$,COMIDispatch-method}
\alias{$,CompiledCOMCoClass-method}
\alias{$,CompiledCOMIDispatch-method}
\alias{$<-,COMIDispatch,ANY-method}
\alias{$<-,CompiledCOMCoClass,character-method}
\alias{$<-,CompiledCOMIDispatch,character-method}
\alias{.COM}
\alias{.COMInit}
\alias{COMCreate}
\alias{COMCurrency-class}
\alias{COMDate-class}
\alias{COMDecimal-class}
\alias{COMIDispatch-class}
\alias{COMList}
\alias{COMList-class}
\alias{COMNames}
\alias{COMStop}
\alias{COMTypedList-class}
\alias{COMTypedNamedList-class}
\alias{COMTypedParameterizedNamedList-class}
\alias{CompiledCOMCoClass-class}
\alias{CompiledCOMIDispatch-class}
\alias{CurrencyVARIANT-class}
\alias{DateVARIANT-class}
\alias{DispatchMethods}
\alias{EnumValue}
\alias{EnumValue,character,EnumValue,ANY-method}
\alias{EnumValue,character,missing,EnumValue-method}
\alias{EnumValue,character,numeric,EnumValue-method}
\alias{EnumValue,numeric,EnumValue,ANY-method}
\alias{EnumValue,numeric,missing,EnumValue-method}
\alias{EnumValue-class}
\alias{HResult-class}
\alias{IUnknown-class}
\alias{RDCOMClient}
\alias{SCOMErrorInfo-class}
\alias{VARIANT-class}
\alias{[,COMList,numeric,missing-method}
\alias{[,COMTypedNamedList,character,missing-method}
\alias{[,COMTypedNamedList,numeric,missing-method}
\alias{[[,COMIDispatch,ANY-method}
\alias{[[,COMIDispatch,numeric-method}
\alias{[[,COMList,numeric-method}
\alias{[[,COMTypedList,character-method}
\alias{[[,COMTypedList,numeric-method}
\alias{[[,COMTypedNamedList,character-method}
\alias{[[,CompiledCOMCoClass,character-method}
\alias{[[,CompiledCOMIDispatch,character-method}
\alias{[[,CompiledCOMIDispatch,numeric-method}
\alias{[[<-,COMIDispatch,character,missing-method}
\alias{[[<-,COMIDispatch,numeric,ANY-method}
\alias{[[<-,COMList,numeric,ANY-method}
\alias{[[<-,CompiledCOMCoClass,character,ANY-method}
\alias{[[<-,CompiledCOMIDispatch,character,ANY-method}
\alias{asCOMArray}
\alias{createCOMReference}
\alias{createTypeVarName}
\alias{createTypeVarName,COMIDispatch-method}
\alias{createTypeVarName,CompiledCOMCoClass-method}
\alias{createTypeVarName,character-method}
\alias{getCLSID}
\alias{getCOMElements}
\alias{getCOMInstance}
\alias{getItemClassName}
\alias{getItemClassName,COMTypedList-method}
\alias{getItemClassName,COMTypedNamedList-method}
\alias{getItemClassName,CompiledCOMCoClass-method}
\alias{isValidCOMObject}
\alias{lapply}
\alias{lapply,COMIDispatch-method}
\alias{lapply,COMList-method}
\alias{length,COMList-method}
\alias{names,COMTypedNamedList-method}
\alias{names,COMTypedParameterizedNamedList-method}
\alias{names,CompiledCOMIDispatch-method}
\alias{sapply}
\alias{sapply,COMIDispatch-method}
\alias{sapply,COMList-method}
\alias{show,EnumValue-method}
\title{Functions from RDCOMClient package}
\format{An object of class \code{integer} of length 3.}
\usage{
COMStop(msg, status, class = "COMError")

createCOMReference(ref, className)

DispatchMethods

.COMInit(status = TRUE)

COMCreate(name, ..., existing = TRUE)

getCOMInstance(guid, force = TRUE, silent = FALSE)

getCLSID(appName)

\S4method{$}{COMIDispatch,ANY}(x, name) <- value

\S4method{$}{COMIDispatch}(x, name)

\S4method{[[}{COMIDispatch,numeric}(x, i, j, ...)

\S4method{[[}{COMIDispatch,ANY}(x, i, j, ...)

\S4method{[[}{COMIDispatch,character,missing}(x, i, j, ...) <- value

\S4method{[[}{COMIDispatch,numeric,ANY}(x, i, j, ...) <- value

.COM(obj, name, ..., .dispatch = as.integer(3), .return = TRUE,
  .ids = numeric(0), .suppliedArgs)

asCOMArray(obj)

isValidCOMObject(obj)

COMList(obj, class = "COMList")

\S4method{length}{COMList}(x)

\S4method{[[}{COMList,numeric}(x, i, j, ...)

\S4method{[[}{COMList,numeric,ANY}(x, i, j, ...) <- value

\S4method{length}{COMList}(x)

lapply(X, FUN, ...)

sapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)

\S4method{lapply}{COMList}(X, FUN, ...)

\S4method{sapply}{COMList}(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE)

\S4method{lapply}{COMIDispatch}(X, FUN, ...)

\S4method{sapply}{COMIDispatch}(X, FUN, ..., simplify = TRUE,
  USE.NAMES = TRUE)

getItemClassName(x)

\S4method{getItemClassName}{COMTypedList}(x)

\S4method{[[}{COMTypedList,numeric}(x, i, j, ...)

\S4method{names}{COMTypedParameterizedNamedList}(x)

\S4method{[[}{COMTypedList,character}(x, i, j, ...)

\S4method{getItemClassName}{COMTypedNamedList}(x)

\S4method{names}{COMTypedNamedList}(x)

\S4method{getItemClassName}{CompiledCOMCoClass}(x)

\S4method{[[}{CompiledCOMCoClass,character}(x, i, j, ...)

\S4method{[[}{CompiledCOMCoClass,character,ANY}(x, i, j, ...) <- value

\S4method{$}{CompiledCOMCoClass}(x, name)

\S4method{$}{CompiledCOMCoClass,character}(x, name) <- value

COMNames(x)

\S4method{names}{CompiledCOMIDispatch}(x)

\S4method{$}{CompiledCOMIDispatch}(x, name)

\S4method{[[}{CompiledCOMIDispatch,character}(x, i, j, ...)

\S4method{[[}{CompiledCOMIDispatch,numeric}(x, i, j, ...)

\S4method{$}{CompiledCOMIDispatch,character}(x, name) <- value

\S4method{[[}{CompiledCOMIDispatch,character,ANY}(x, i, j, ...) <- value

\S4method{[}{COMList,numeric,missing}(x, i, j, ..., drop = TRUE)

\S4method{[}{COMTypedNamedList,numeric,missing}(x, i, j, ..., drop = TRUE)

\S4method{[}{COMTypedNamedList,character,missing}(x, i, j, ..., drop = TRUE)

\S4method{[[}{COMTypedNamedList,character}(x, i, j, ..., exact = NA)

\S4method{show}{EnumValue}(object)

EnumValue(id, value, obj = new("EnumValue"))

\S4method{EnumValue}{character,numeric,EnumValue}(id, value,
  obj = new("EnumValue"))

\S4method{EnumValue}{character,EnumValue,ANY}(id, value,
  obj = new("EnumValue"))

\S4method{EnumValue}{numeric,EnumValue,ANY}(id, value, obj = new("EnumValue"))

\S4method{EnumValue}{character,missing,EnumValue}(id, value,
  obj = new("EnumValue"))

\S4method{EnumValue}{numeric,missing,EnumValue}(id, value,
  obj = new("EnumValue"))

createTypeVarName(className, var, quote = TRUE)

\S4method{createTypeVarName}{COMIDispatch}(className, var, quote = TRUE)

\S4method{createTypeVarName}{CompiledCOMCoClass}(className, var, quote = TRUE)

\S4method{createTypeVarName}{character}(className, var, quote = TRUE)

getCOMElements(type, env = NA, namesOnly = FALSE)
}
\arguments{
\item{msg}{See RDCOMClient documentation.}

\item{status}{See RDCOMClient documentation.}

\item{class}{See RDCOMClient documentation.}

\item{ref}{See RDCOMClient documentation.}

\item{className}{See RDCOMClient documentation.}

\item{name}{See RDCOMClient documentation.}

\item{...}{See RDCOMClient documentation.}

\item{existing}{See RDCOMClient documentation.}

\item{guid}{See RDCOMClient documentation.}

\item{force}{See RDCOMClient documentation.}

\item{silent}{See RDCOMClient documentation.}

\item{appName}{See RDCOMClient documentation.}

\item{x}{See RDCOMClient documentation.}

\item{value}{See RDCOMClient documentation.}

\item{i}{See RDCOMClient documentation.}

\item{j}{See RDCOMClient documentation.}

\item{obj}{See RDCOMClient documentation.}

\item{.dispatch}{See RDCOMClient documentation.}

\item{.return}{See RDCOMClient documentation.}

\item{.ids}{See RDCOMClient documentation.}

\item{.suppliedArgs}{See RDCOMClient documentation.}

\item{X}{See RDCOMClient documentation.}

\item{FUN}{See RDCOMClient documentation.}

\item{simplify}{See RDCOMClient documentation.}

\item{USE.NAMES}{See RDCOMClient documentation.}

\item{drop}{See RDCOMClient documentation.}

\item{exact}{See RDCOMClient documentation.}

\item{object}{See RDCOMClient documentation.}

\item{id}{See RDCOMClient documentation.}

\item{var}{See RDCOMClient documentation.}

\item{quote}{See RDCOMClient documentation.}

\item{type}{See RDCOMClient documentation.}

\item{env}{See RDCOMClient documentation.}

\item{namesOnly}{See RDCOMClient documentation.}
}
\description{
For details about these functions see help for RDCOMClient package by 
Duncan Temple Lang \email{duncan@wald.ucdavis.edu}: 
\url{http://www.omegahat.net/RDCOMClient}, \url{http://www.omegahat.net}.
}
\author{
Duncan Temple Lang \email{duncan@wald.ucdavis.edu}
}
\keyword{datasets}

